digraph Finding_Primes {
	node [shape = box]
	splines = ortho
	initialize_cache [label = "Initialize Cache"]
	user_input_mm  [label = "Main Menu"]

	initialize_cache -> user_input_mm -> {prime_intro, counter_intro, factor_intro};

	subgraph cluster_Prime {
		label="Primes"
		edge [color = "red1"]

		prime_intro [label="Prime Loop"]
		should_exit [shape = parallelogram]
		is_number_in_cache [shape = parallelogram]

		prime_intro -> get_user_input
		get_user_input -> should_exit

		should_exit -> is_number_in_cache [label = "no"]
		
		is_number_in_cache -> expand_cache [label = "no"]
		expand_cache -> is_number_in_cache 
		is_number_in_cache -> print_output [label = "yes"]

		print_output -> prime_intro
	}
	should_exit -> user_input_mm [label = "yes"]

	subgraph cluster_Counter {
		label="Counter"
		edge [color = "green4"]

		counter_intro [label="Counter Loop"]
		should_exit_1 [shape = parallelogram]
		is_biggest_number_in_cache [shape = parallelogram]

		counter_intro -> get_user_input_1
		get_user_input_1 -> should_exit_1

		should_exit_1 -> is_biggest_number_in_cache [label="no"]
		is_biggest_number_in_cache -> expand_cache_1 [label="no"]
		expand_cache_1 ->  is_biggest_number_in_cache 
		is_biggest_number_in_cache -> get_cache_range [label = "yes"]

		get_cache_range -> print_range_output -> counter_intro
	}
	should_exit_1 -> user_input_mm [label = "yes"]

	subgraph cluster_Factorize {
		label="Factorize"
		edge [color = "blue"]

		factor_intro [label="Factorizing Loop"]
		should_exit_2 [shape = parallelogram]
		is_largest_number_in_cache [shape = parallelogram]

		factor_intro -> get_user_input_2 -> should_exit_2
		should_exit_2 -> is_largest_number_in_cache [label = "no"]

		is_largest_number_in_cache -> expand_cache_3 [label = "no"]
		expand_cache_3 -> is_largest_number_in_cache 
	
		is_largest_number_in_cache -> filter_output [label = "yes"]	
		filter_output -> print_factor_output 

		print_factor_output -> factor_intro
	}
	should_exit_2 -> user_input_mm [label = "yes"]

}
